// https://www.prisma.io/docs/orm/overview/databases/cloudflare-d1
// https://www.prisma.io/docs/guides/using-prisma-orm-with-cloudflare-d1
// https://hono.dev/examples/prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  email            String        @unique
  hashedPassword   String
  name             String?
  emailVerified    Boolean       @default(false)
  tempToken        String? // Token temporal (para verificación o recuperación)
  tempTokenExpires DateTime?
  hotels           Hotel[]
  bookings         Booking[]
  subscription     Subscription? @relation
  subscriptionId   String?       @unique
  transactions     Transaction[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Hotel {
  id            String    @id @default(cuid())
  userId        String
  name          String
  slug          String    @unique
  type          String?
  subType       String?
  coverImage    String?
  rooms         Int?
  website       String?
  phone         String
  location      Json?
  options       Json?
  isPublic      Boolean   @default(false)
  fieldsAllowed Json? // String[]
  domain        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bookings      Booking[]
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Booking {
  id             String    @id @default(cuid())
  hotelId        String
  userId         String
  reservationId  String
  checkin        DateTime
  checkout       DateTime?
  status         Status    @default(unknown)
  nights         Int?
  client         Json
  observations   String?
  requiredFields Json? // String[]
  allowedFields  Json? // String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  paxs           Pax[]
  hotel          Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Status {
  unknown
  cancelled
  pending
  confirmed
}

model Pax {
  id                String    @id @default(cuid())
  bookingId         String
  firstname         String
  lastname          String
  email             String
  phone             String
  docType           String
  docNumber         String
  birthdate         String?
  nationalityCode   String?
  city              String?
  address           String?
  postalCode        String?
  arrivalDate       DateTime?
  departureDate     DateTime?
  carModel          String?
  carPlate          String?
  files             Json?
  submittedAt       DateTime?
  lastEditPaxAt     DateTime?
  guestObservations String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  booking           Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

enum SubscriptionStatus {
  active
  canceled
  paused
  unpaid
}

enum SubscriptionPlan {
  free
  pro
  business
}

model Subscription {
  id                      String             @id @default(cuid())
  gatewayCustomerId       String?            @unique
  gatewaySubscriptionId   String?            @unique
  gatewayPriceId          String?
  gatewayCurrentPeriodEnd DateTime?
  subscribedAt            DateTime           @default(now()) // when susbcribed to paid plan
  trialEndsAt             DateTime?
  canceledAt              DateTime?
  plan                    SubscriptionPlan   @default(free)
  status                  SubscriptionStatus @default(active)
  updatedAt               DateTime           @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique
  transactions Transaction[]
}

enum PaymentStatus {
  success
  failed
  pending
  refunded
}

model Transaction {
  id                   String        @id @default(cuid())
  userId               String
  subscriptionId       String?
  amount               Float
  currency             String        @default("ARS")
  status               PaymentStatus
  description          String?
  gateway              String?
  gatewayTransactionId String?
  createdAt            DateTime      @default(now())

  user         User          @relation(fields: [userId], references: [id])
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}
